/**
 *	myftpServer.java is a Server
 *
 * 		Author : Likhita Kode
 **/


import java.net.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;
import java.io.*;

@SuppressWarnings("unused")
public class myftpServer {

	static InputStream s1In;
	static DataInputStream dis;
	static OutputStream s1out;
	static DataOutputStream dos;
	static String command, out;
	static String[] C;
	static Scanner sc;

	@SuppressWarnings({ "resource" })
	public static void main(String args[]) throws IOException {

		sc = new Scanner(System.in);
		//Ask for port number 
		System.out.println("Enter the port Number: ");

		// Register service on specified port 
		int Port=sc.nextInt();
		ServerSocket s = new ServerSocket(Port);

		//Get a communication stream associated with the socket
		System.out.println("Server is running on "+Port);

		Socket s1 = s.accept();

		s1In = s1.getInputStream();
		dis = new DataInputStream(s1In);
		s1out = s1.getOutputStream();
		dos = new DataOutputStream (s1out);

		while (true) 
		{
			System.out.println("Waiting for Command...");
			command = dis.readUTF();
			C=command.split(" " );

			if(C[0].contentEquals("pwd"))
			{
				System.out.println("\tpwd Command Received ...");
				dos.writeUTF(CurrDir());
			} 
			else if(C[0].contentEquals("delete"))
			{
				System.out.println("\tdelete Command Received ...");
				dos.writeUTF(DeleteFD(C[1]));
			}
			else if(C[0].contentEquals("mkdir"))
			{
				System.out.println("\tmkdir Command Received ...");
				dos.writeUTF(MkDirectory(C[1]));
			}
			else if(C[0].contentEquals("ls"))
			{
				System.out.println("\tls Command Received ...");
				dos.writeUTF(ListFD());
			}
			else if(C[0].contentEquals("cd"))
			{
				System.out.println("\tcd Command Received ...");
				dos.writeUTF(CDDirectory(C[1]));
			}			
			else if(C[0].contentEquals("get"))
			{
				System.out.println("\tget Command Received ...");
				try {
					GETFile();
				} catch (Exception e) {}
			}			
			else if(C[0].contentEquals("put"))
			{
				System.out.println("\tput Command Received ...");
				try {
					PUTFile();
				} catch (Exception e) {}
			}			
			else if(C[0].contentEquals("quit"))
			{
				dos.writeUTF("\tDisconnect Command Received ...");
				s1.close();
				System.out.println("Client Disconnected");
				s1 = s.accept();
				s1In = s1.getInputStream();
				dis = new DataInputStream(s1In);
				s1out = s1.getOutputStream();
				dos = new DataOutputStream (s1out);

				System.out.println("Server is running...\nWaiting for Client Request...");
			}
			else
			{
				dos.writeUTF("Please Enter Valid Command !");
			}	
		}
	}

	/** pwd: Display Current Directory */
	public static String CurrDir() 

	{        
		String currentDir = System.getProperty("user.dir");
		return currentDir;
	}
	
	/**delete: delete a file or directory  */
	public static String DeleteFD(String fileName) 
	{        
		File f=new File(fileName);
		if(!f.exists())
		{
			return "File/Directory not found";
		}
		else
		{
			f.delete();
			return "File/Directory Deleted";
		}	
	}


	/**mkdir : creates a new sub directory */
	public static String MkDirectory(String fileName) 
	{	   
		File file = new File(fileName);
		if (!file.exists()) {
			if (file.mkdir()) 
			{
				return "Directory is created!";
			} 
			else 
			{
				return "Failed to create directory!";
			}
		}
		else
		{
			return "Directory Already Exists!";
		}
	}

	
	/** ls: lists all files and sub directories*/
	public static String ListFD() 
	{        
		File f=new File(System.getProperty("user.dir"));
		File[] listOfFiles = f.listFiles();
		String text="";
		String d="",f1="",t="";
		for (int j = 0; j < listOfFiles.length; j++) {
			if (listOfFiles[j].isDirectory()) {
				text = listOfFiles[j].getName();
				d= d + '\t' + text ;
			}
			else if (listOfFiles[j].isFile()) {
				text = listOfFiles[j].getName();
				f1= f1 + '\t' + text;
			}
			t= "Dir(s) : " + d  + '\n' + "File(s): " + f1;
		}
		if (d.isEmpty() && f1.isEmpty())
		{
			return "Dir(s) :0" + "Files(s) :0";
		}
		else
		{

			return t;	
		}
	}
	
	
	/**cd : change directory */
	public static String CDDirectory(String str) 
	{

		String[] NewPath = null;
		String S = "";

		//cd .. : directory path one level up
		if(str.contentEquals(".."))
		{ 

			String currentDir = System.getProperty("user.dir");
			String delims = "[\\\\]+";
			int l=currentDir.length();
			for (int i=0;i<=l;i++)
			{
				NewPath=currentDir.split(delims);
			}
			for (int j=0;j<NewPath.length-1;j++)
			{
				S=S.concat(NewPath[j]+"\\");
			}
			System.setProperty("user.dir", S);
			return CurrDir();
		}

		else 
		{
			String currentpwd = System.getProperty("user.dir");
			System.setProperty("user.dir",currentpwd);
			String tocheck = currentpwd + "\\" + str;
			File dir = new File(tocheck);
			if(dir.isDirectory()) {
				String P = currentpwd + str;
				System.setProperty("user.dir",P);
				return CurrDir();	
			}			
			else 
			{
				return str + " is not a directory.";
			}
		}
	}
	
	
	/**get: puts a file to the client*/	
	static void GETFile() throws Exception
	{        
		String filename=dis.readUTF();
		File f=new File(filename);
		if(!f.exists())
		{
			dos.writeUTF("File Not Found on Server");
			return;
		}
		else if(f.exists())
		{
			dos.writeUTF("Ready to Send a File");
			String temp =dis.readUTF();
			if (temp.contentEquals("Yes"))
			{
				FileInputStream fin=new FileInputStream(f);
				int ch=0;
				do
				{
					ch=fin.read();
					dos.writeUTF(String.valueOf(ch));
				}   while(ch!=-1);  
				fin.close();    
				dos.writeUTF("File Received Successfully by Client");                            
			}
			else 
			{
				return;
			}
		}
	}


	/**put : gets a file from the client*/		
	static void PUTFile() throws Exception
	{
		String filename=dis.readUTF();
		if(filename.compareTo("File not found on Client")==0)
		{			
			return;
		}
		else
		{			
			File f=new File(filename);
			if(f.exists())
			{
				dos.writeUTF("File Already Exists on Server");

			}
			else
			{
				dos.writeUTF("Ready to transfer file...");

				FileOutputStream fout=new FileOutputStream(f);
				int ch=0;
				String temp;
				do
				{
					temp=dis.readUTF();
					ch=Integer.parseInt(temp);
					if(ch!=-1)
					{
						fout.write(ch);                    
					}
				}while(ch!=-1);
				fout.close();
				dos.writeUTF("File Sent Successfully by Client");
			}
		}
	}



}
